// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package konntent_authentication_service

import (
	"github.com/google/wire"
	"go.uber.org/zap"
	"konntent-authentication-service/internal/app"
	"konntent-authentication-service/internal/app/authorize"
	"konntent-authentication-service/internal/app/handler"
	"konntent-authentication-service/internal/app/orchestration"
	"konntent-authentication-service/internal/app/workspace"
	"konntent-authentication-service/pkg/nrclient"
	"konntent-authentication-service/pkg/pg"
	"konntent-authentication-service/pkg/workspaceclient"
)

// Injectors from wire.go:

func InitAll(l *zap.Logger, pgInstance pg.Instance, workspaceClient workspaceclient.Client, nrInstance nrclient.NewRelicInstance) app.Router {
	repository := authorize.NewAuthorizeRepository(l, pgInstance)
	service := authorize.NewAuthorizeService(l, repository)
	workspaceRepository := workspace.NewWorkspaceRepository(l, pgInstance)
	workspaceService := workspace.NewWorkspaceService(l, workspaceRepository, workspaceClient)
	authentication := orchestration.NewAuthenticationOrchestration(l, service, workspaceService)
	authHandler := handler.NewAuthHandler(authentication, repository)
	router := app.NewRoute(authHandler)
	return router
}

// wire.go:

var serviceProviders = wire.NewSet(authorize.NewAuthorizeService, workspace.NewWorkspaceService)

var repositoryProviders = wire.NewSet(authorize.NewAuthorizeRepository, workspace.NewWorkspaceRepository)

var orchestratorProviders = wire.NewSet(orchestration.NewAuthenticationOrchestration)

var handlerProviders = wire.NewSet(handler.NewAuthHandler)

var allProviders = wire.NewSet(
	repositoryProviders,
	serviceProviders,
	orchestratorProviders,
	handlerProviders,
)
